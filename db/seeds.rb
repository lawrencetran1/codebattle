Challenge.create!([
  {name: "Square root?", category: "Javascript", instructions: "Write a function named \"squareRoot\" that checks if the parameter passed in is a square root.\r\n\r\nsquareRoot(4096) //=> true\r\nsquareRoot(333)  //=> false", answer: "functionsquareRoot(num){if(Math.sqrt(num)%1==0){returntrue;}else{returnfalse;}}", starter: "function squareRoot(num) {\r\n  if (condition) {\r\n    return true;\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n}", documentation: "http://en.wikipedia.org/wiki/Square_root", user_id: 1},
  {name: "Evenly Divisible?", category: "Javascript", instructions: "Write a function named \"evenlyDivide\" that accepts 1 argument, an INTEGER. \r\n\r\nReturn an array filled with numbers that evenly divide into the target number.\r\n\r\nevenlyDivide(4)  #=> [1,2,4]\r\nevenlyDivide(5)  #=> [1,5]\r\nevenlyDivide(30) #=> [1,2,3,5,6,10,15,30]\r\n", answer: "functionevenlyDivide(num){vararray=[];for(vari=1;i<=num;i++){if(num%i==0){array.push(i);}}returnarray;}", starter: "function evenlyDivide(num) {\r\n  var array = [];\r\n  for (condition) {\r\n    if (condition) {\r\n      array.push(?);\r\n    }\r\n  }\r\n  return array;\r\n}", documentation: "http://www.google.com", user_id: 1},
  {name: "Palindrome!", category: "Javascript", instructions: "A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.\r\n\r\nWrite a function named \"palindrome\" that accepts one parameter, a STRING. If the word is a palindrome return true, if not return false.\r\n\r\npalindrome(\"Glenn\")  #=> false\r\npalindrome(\"Anna\")   #=> true", answer: "functionpalindrome(string){vararray=string.toLowerCase().split('');vartest=null;if(string.length%2!=0){returnfalse;}else{for(vari=0;i<array.length/2;i++){if(array[i]===array[array.length-1-i]){test=true;}}returntest;}}", starter: "function palindrome(string) {\r\n  var array = string.toLowerCase().split('');\r\n  var test = null;\r\n  if (condition) {\r\n    return false;\r\n  }\r\n  else {\r\n    for (condition) {\r\n      if (condition) {\r\n        test = true;\r\n      }\r\n    }\r\n  return test;\r\n  }\r\n}", documentation: "http://www.google.com", user_id: 1},
  {name: "Reverse string", category: "Javascript", instructions: "Create a function named \"reverse\" for the String prototype that will allow the following functionality:\r\n\r\n\"String\".reverse();         //=> returns \"gnirtS\"\r\n\"I like cookies\".reverse(); //=> \"seikooc ekil I\"", answer: "String.prototype.reverse=function(){vararray=[];for(varkeyinthis){array.push(this[key])}array.pop();returnarray.reverse().join('').toString();}", starter: "String.prototype.reverse = function() {\r\n  var array = [];\r\n  for (condition) {\r\n    array.push(condition)\r\n  }\r\n  array.pop();\r\n  return array.method().method('').method();\r\n}", documentation: "http://www.google.com", user_id: 1},
  {name: "Divisor", category: "Ruby", instructions: "Takes an integer and returns an array of its divisors\r\n\r\ndivisor(6) => [6,3,2,1,]\r\ndivisor(10) => [10,5,2,1]\r\ndivisor(1) => [1]\r\ndivisor(27) => [27,9,3,1]\r\ndivisor(37) => [37,1]", answer: "defdivisor(n)i=1result=[]whilei<=nifn%i==0result.push(i)endi+=1endresultend", starter: "def divisor(n)\r\n  i = 1\r\n  result = []\r\n  while condition\r\n    if condition\r\n      result.push(?)\r\n    end\r\n    i += ?\r\n  end\r\n  result\r\nend", documentation: "http://ruby-doc.org/", user_id: 1},
  {name: "Does My List Include This?", category: "Ruby", instructions: "Create a method include? that accepts a list and an item, and returns true if the item belongs to the list.", answer: "definclude?array,itemifarray.index(item)trueelsefalseendend", starter: "def include? array, item\r\n  if condition\r\n    true\r\n  else\r\n    false\r\n  end\r\nend", documentation: "http://www.rubycuts.com/enum-include", user_id: 1},
  {name: "Sentence Smash", category: "Ruby", instructions: "Write a method smash that takes an array of words and smashes them together into a sentence and returns the sentence.\r\n\r\nwords = ['hello', 'world', 'this', 'is', 'great']\r\nsmash(words) # returns \"hello world this is great\"", answer: "defsmash(words)words.join('')end", starter: "def smash(words)\r\n  statement\r\nend", documentation: "http://ruby-doc.org/", user_id: 1},
  {name: "String or nah", category: "Ruby", instructions: "Write a method that checks class of an input.\r\n\r\ncheck_class(1) => \"Fixnum\"\r\ncheck_class(\"a\") => \"String\"", answer: "defcheck_class(input)input.classend", starter: "def check_class(input)\r\n  statement\r\nend", documentation: "http://ruby-doc.org/", user_id: 1},
  {name: "Still ballin'", category: "Ruby", instructions: "Who is better, Kobe or Jordan?", answer: "Larry", starter: "GOAT", documentation: "http://www.nba.com", user_id: 1},
  {name: "Easiest challenge ever", category: "Ruby", instructions: "Fill in the blank...\r\n\r\nAin't no fun if the ______ can't get none!", answer: "homies", starter: "-_____-", documentation: "", user_id: 2}
])
User.create!([
  {username: "larry", email: "larry@gmail.com", password_digest: "$2a$10$BnDA0LC9vpj6ZzHhTXZAWe0Vo7dtYPjxQNfwUadtZwjLBf67s1mNe", role: nil},
  {username: "user1", email: "user1@gmail.com", password_digest: "$2a$10$rKYHLGiwJI/jdq5Z7KBAyObAXVWmRCvmUJ4vXrvRcXKOH0uAkTnxi", role: nil}
])
